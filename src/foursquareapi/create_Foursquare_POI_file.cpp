#include <cstdint>
#include <iostream>
#include <fstream>
#include <memory>
#include <iomanip>
#include <string>
#include <fstream>

#include <curl/curl.h>
#include "foursquarefunctions.hpp"
#include "../../resources/jsoncpp-master/include/json/json.h"

namespace
{
    std::size_t callBackAppend(
            const char* bufIn,
            std::size_t bufSize,
            std::size_t bufNum,
            std::string* bufOut)
    {
        const std::size_t byteCount(bufSize * bufNum);
        bufOut->append(bufIn, byteCount);
        return byteCount;
    }
}

int get_foursquare_data(std::string category, std::string city, std::string country)
{

//    std::ifstream input("../../../key.txt");
//    std::string key;
//    if (!input.is_open()) {
//        std::cout << "failed to open key " << "\n";
//    }
//    else {
//        getline(input, key);
//    }
//    std::cout << key << std::endl;
//    input.close();
//    if(argc != 4) {
//        fprintf(stderr, "Usage: %s Category City CountryCode\n", argv[0]);
//        exit(EXIT_FAILURE);
//    }

    //std::string paramCategory = argv[1];
    //std::string paramCity = argv[2];
    //std::string paramCountryCode = argv[3];
    std::string paramCategory = category;
    std::string paramCity = city;
    std::string paramCountryCode = country;
    std::string url = "https://api.foursquare.com/v3/places/search?query=" + paramCategory + "&near=" + paramCity + "%2c+" + paramCountryCode + \
                        "&fields=fsq_id%2Cname%2Cgeocodes%2Clocation%2Crating%2Clink%2Cwebsite&time=any&day=any&limit=30";
    //std::cout << url << std::endl;
    /* This code was [largely] auto-generated by curl */

    struct curl_slist *slist;

    slist = NULL;
    slist = curl_slist_append(slist, "Accept: application/json");
    
    // Technically the auth key should be read in from a secure file - placing this on GitHub or anywhere accessible may cost $$$
    std::string auth = "Authorization: fsq37clEEO24dopFGXqnCT+OPC9RcXkS8DiFduKKVhSNtyA=";
    //std::string auth = "bad";
    const char *auther = auth.c_str();
    slist = curl_slist_append(slist, auther);

    CURL* curl = curl_easy_init();
    
    if(curl == NULL) {
        fprintf(stderr, "Failed to create CURL connection\n");
        exit(EXIT_FAILURE);
    }
    CURLcode code;

    code = curl_easy_setopt(curl, CURLOPT_BUFFERSIZE, 102400L);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set buffer [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    //curl_easy_setopt(curl, CURLOPT_URL, "https://api.foursquare.com/v3/places/search?query=restaurants&near=Toronto%2c+ON&fields=fsq_id%2Cname%2Cgeocodes%2Clocation%2Crating%2Clink&time=any&day=any&limit=30");
    code = curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set URL [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 1L);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set progress [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_HTTPHEADER, slist);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set httpheader [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_USERAGENT, "curl/8.2.1");
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set useragent [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_MAXREDIRS, 50L);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set maxredirs [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_HTTP_VERSION, (long)CURL_HTTP_VERSION_2TLS);
     if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set http version [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_FTP_SKIP_PASV_IP, 1L);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set ftp skip passive [%d]\n", code);
        exit(EXIT_FAILURE);
    }
    code = curl_easy_setopt(curl, CURLOPT_TCP_KEEPALIVE, 1L);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set tcp keepalive [%d]\n", code);
        exit(EXIT_FAILURE);
    }

    // Response 
    long httpCode(0);
    std::unique_ptr<std::string> httpResp(new std::string());

    // Hook up data handling function.
    code = curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callBackAppend);
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set writefunction [%d]\n", code);
        exit(EXIT_FAILURE);
    }

    // Connect container callback
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, httpResp.get());
    if(code != CURLE_OK) {
        fprintf(stderr, "Failed to set connect writedata callback [%d]\n", code);
        exit(EXIT_FAILURE);
    }

    // GET data and response
    code = curl_easy_perform(curl);
      if(code != CURLE_OK) {
        fprintf(stderr, "Failed to get data [%d]\n", code);
        exit(EXIT_FAILURE);
    }

    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpCode);
    curl_easy_cleanup(curl);

    std::cout << httpCode << std::endl;
    if (httpCode == 200) {
        std::cout << "\nSuccess" << std::endl;

        // Response looks good - try and convert to JSON and write results to a file
        Json::Value jsonData;
        JSONCPP_STRING jsonError;
        Json::CharReaderBuilder builder;

        std::ofstream poi_file(paramCategory + paramCity + paramCountryCode + ".json");
        // To add - check for file open errors

        const std::unique_ptr<Json::CharReader> charReader(builder.newCharReader());

        if (charReader->parse(httpResp->c_str(), httpResp->c_str() + httpResp->length(), &jsonData, &jsonError))
        {
            //std::cout << "JSON data parsed" << std::endl;
            poi_file << jsonData.toStyledString() << std::endl;
            //std::cout << "\nJSON data written to file" << std::endl;
        }
        else
        {
            std::cout << "Response could not be parsed as JSON" << std::endl;
            std::cout << "Response as HTTP:\n" << *httpResp.get() << std::endl;
            return 1;
        }
    }
    else {
        std::cout << "Couldn't GET from Foursquare - exiting" << std::endl;
        return 1;
    }
    return 0;
}
